name: Assign GitHub Copilot License
# This workflow is triggered when an issue is labeled
on:
  issues:
    types: [labeled]
jobs:
  assign_github_copilot_license:
    # This job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # This job only runs if the label added to the issue is 'copilot-request'
    if: github.event.label.name == 'copilot-request'
    steps:
      # This step sets up Node.js version 20
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # This step installs the @octokit/action npm package
      - run: npm install @octokit/action
      # This step gets a GitHub App installation access token
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}      
      # This step assigns a GitHub Copilot license to the user who created the issue
      - name: Assign GitHub Copilot license
        id: assign_license
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} 
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit();            
            const response = await octokit.request('POST /orgs/{org}/copilot/billing/selected_users', {
              org: context.repo.owner,
              selected_usernames: [context.payload.sender.login],
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            return response.status >= 200 && response.status < 300 ? 'success' : 'failure'
      # If the previous step was successful, this step comments on the issue and closes it
      - name: Comment and close GitHub Issue on success
        if: steps.assign_license.outcome == 'success'
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Successfully assigned the GitHub Copilot license.',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
      # If the previous step failed, this step comments on the issue to notify about the failure
      - name: Comment GitHub Issue on failure
        if: steps.assign_license.outcome == 'failure'        
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Failed assigning the GitHub Copilot license. Please contact the organization administrator.',
              content: 'confused',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });